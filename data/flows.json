[
    {
        "id": "1298b4fe103a59c1",
        "type": "tab",
        "label": "フロー 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1bb105999f7bf48d",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "da715f9bdd546276",
        "type": "http response",
        "z": "1298b4fe103a59c1",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 950,
        "y": 80,
        "wires": []
    },
    {
        "id": "13feff8e4915cc17",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "layerx_parse",
        "func": "var ietfnetwork = msg[\"payload\"][\"ietf-network:networks\"]\n\nfor(const item of ietfnetwork[\"network\"]) {\n    if (item[\"network-id\"] == msg.req.params.layer ) {\n        var array = [];\n        for ( var targetnode of item[\"node\"] ) {\n            var tmpdict = { \"node\": \"\", \"iflist\": \"\" };\n            tmpdict.node = targetnode[\"node-id\"]\n            var array2 = [];\n            for (const item2 of targetnode[\"ietf-network-topology:termination-point\"]) {\n                array2.push(item2[\"tp-id\"]);\n            }\n            tmpdict.iflist = array2;\n            array.push(tmpdict)\n  \n            //msg.payload = item[\"node\"];\n        };\n        msg.payload = array;\n    };\n};\n//msg.payload = ietfnetwork;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "da715f9bdd546276",
                "98d4fe11fefcdde5"
            ]
        ]
    },
    {
        "id": "98d4fe11fefcdde5",
        "type": "debug",
        "z": "1298b4fe103a59c1",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 220,
        "wires": []
    },
    {
        "id": "6d2b7d4489774df7",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "ospf_parse",
        "func": "var temp = msg[\"payload\"][\"ietf-network:networks\"][\"network\"];\nvar area = msg.req.params.area\nvar dict = {};\nvar array = [];\nfor (const ospfdict of temp){\n    var ospfarea = \"ospf\"\n    if (ospfdict[\"network-id\"] == ospfarea.concat('_', area)) {\n        for (const item of ospfdict[\"node\"]) {\n            if (item[\"mddo-topology:ospf-area-node-attributes\"][\"node-type\"] == \"ospf_proc\") {\n                var tpid = [];\n                for (const item2 of item[\"ietf-network-topology:termination-point\"] ) {\n                    tpid.push(item2[\"tp-id\"]);\n                }\n                dict = { \"node\": item[\"node-id\"], \"iflist\": tpid, \"attributes\": item[\"mddo-topology:ospf-area-node-attributes\"] }\n                array.push(dict)\n\n            }\n        }\n    }\n}\n\nmsg.payload = array;\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 140,
        "wires": [
            [
                "da715f9bdd546276",
                "98d4fe11fefcdde5"
            ]
        ]
    },
    {
        "id": "cf326f38384d9e4f",
        "type": "http response",
        "z": "1298b4fe103a59c1",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 990,
        "y": 520,
        "wires": []
    },
    {
        "id": "a6c4b5d46fab78bc",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "convertlist",
        "func": "var temp = msg[\"payload\"];\nvar array = [];\nfor (var tmpnode of temp) {\n  var array2 = []\n  for (let i = 0; i < tmpnode[\"iflist\"].length; i++) {\n    var convertlist = {};\n    var ifname;\n\n    ifname = msg.req.params.ifname;\n    convertlist[\"original\"] = tmpnode[\"iflist\"][i];\n    convertlist[\"clab\"] = ifname.concat('', i+1)\n    array2.push(convertlist)\n  }\n  array.push({ \"node\": { \"original\": tmpnode[\"node\"], \"clab\": tmpnode[\"node\"].replace(\"/\", \"-\").replace(\"_\", \"-\")   }, \"iflist\": array2 })\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 340,
        "wires": [
            [
                "cf326f38384d9e4f",
                "27bffccc4143dcf8"
            ]
        ]
    },
    {
        "id": "27bffccc4143dcf8",
        "type": "debug",
        "z": "1298b4fe103a59c1",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 660,
        "wires": []
    },
    {
        "id": "3f6372cf52ecb3fa",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "a6c4b5d46fab78bc"
            ]
        ]
    },
    {
        "id": "31215317f079dc61",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "links_parse",
        "func": "var ietfnetwork = msg[\"payload\"][\"ietf-network:networks\"]\nfor (const item of ietfnetwork[\"network\"]) {\n    if (item[\"network-id\"] == msg.req.params.layer) {\n        var array = [];\n        var sort_array = [];\n        for (var targetnode of item[\"ietf-network-topology:link\"]) {\n            var dest = targetnode[\"destination\"][\"dest-node\"].concat(':', targetnode[\"destination\"][\"dest-tp\"]);\n            var source = targetnode[\"source\"][\"source-node\"].concat(':', targetnode[\"source\"][\"source-tp\"]);\n            var tmpstring = array.join(\",\")\n            if (!tmpstring.includes(dest) && !tmpstring.includes(source)) {\n                if (targetnode[\"destination\"][\"dest-node\"].includes(\"Seg\")) {\n                    var checkphrase = targetnode[\"destination\"][\"dest-tp\"].replace(\"_\", \":\")\n                    if (!tmpstring.includes(checkphrase)) {\n                        array.push([dest, source])\n                    }\n                } \n                else { array.push([dest, source]) }\n            }\n            msg.payload = array;\n        };\n    }\n    //msg.payload = ietfnetwork;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 420,
        "wires": [
            [
                "cf326f38384d9e4f",
                "27bffccc4143dcf8"
            ]
        ]
    },
    {
        "id": "7fa384e887d60e58",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 380,
        "wires": [
            [
                "31215317f079dc61"
            ]
        ]
    },
    {
        "id": "367703cd9e48d573",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "convertlist_ospf",
        "func": "var temp = msg[\"payload\"];\nvar array = [];\nvar loopback_regex = \"lo|Loop\"\nvar clab_loopback = \"lo\"\nfor (var tmpnode of temp) {\n  var array2 = []\n  for (let i = 0; i < tmpnode[\"iflist\"].length; i++) {\n    var convertlist = {};\n    var ifname;\n    if (tmpnode[\"node\"].includes(\"Seg\")){\n        ifname = \"Ethernet\";\n    }\n    else {\n      ifname = msg.req.params.ifname;\n    }\n    convertlist[\"original\"] = tmpnode[\"iflist\"][i];\n    if (tmpnode[\"iflist\"][i].match(loopback_regex)) {\n      convertlist[\"clab\"] = clab_loopback\n    }\n    else {\n      convertlist[\"clab\"] = ifname.concat('', i + 1)\n    }\n    array2.push(convertlist)\n  }\n  array.push({ \"node\": { \"original\": tmpnode[\"node\"], \"clab\": tmpnode[\"node\"].replace(\"/\", \"-\").replace(\"_\", \"-\") }, \"iflist\": array2 })\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            [
                "cf326f38384d9e4f"
            ]
        ]
    },
    {
        "id": "d5e491acc693be14",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 220,
        "wires": [
            [
                "367703cd9e48d573"
            ]
        ]
    },
    {
        "id": "f0205f63334fa3f5",
        "type": "http response",
        "z": "1298b4fe103a59c1",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1150,
        "y": 940,
        "wires": []
    },
    {
        "id": "4702d77874e748ce",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "/layer_iflist/:layer",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "bf507f8dbd2097a7"
            ]
        ]
    },
    {
        "id": "bf507f8dbd2097a7",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 470,
        "y": 60,
        "wires": [
            [
                "13feff8e4915cc17"
            ]
        ]
    },
    {
        "id": "74bfacc31e21c322",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "convertif/batfish/:ifname",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "1e26736378dd75c4"
            ]
        ]
    },
    {
        "id": "1e26736378dd75c4",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request layer_iflist",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/layer_iflist/layer3",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 410,
        "y": 220,
        "wires": [
            [
                "d5e491acc693be14"
            ]
        ]
    },
    {
        "id": "b9c390602d4c0309",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "convertif/:ifname",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "b758f2fdd0c4c254"
            ]
        ]
    },
    {
        "id": "b758f2fdd0c4c254",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request layer_iflist",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/layer_iflist/layer3",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "3f6372cf52ecb3fa"
            ]
        ]
    },
    {
        "id": "5ec23e7466dcaf3e",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "/links/:layer",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "7fa384e887d60e58"
            ]
        ]
    },
    {
        "id": "331f2b7c2bde5949",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "convertlink",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "67465003b201e8e4",
                "1d2f322dda67a8a8"
            ]
        ]
    },
    {
        "id": "1d2f322dda67a8a8",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request convertif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/convertif/eth",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 290,
        "y": 580,
        "wires": [
            [
                "11d08993db29bc4a"
            ]
        ]
    },
    {
        "id": "67465003b201e8e4",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request links",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/links/layer3",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "610a86fdfa0bca6c"
            ]
        ]
    },
    {
        "id": "610a86fdfa0bca6c",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 550,
        "y": 500,
        "wires": [
            [
                "6157f188ba1a8854"
            ]
        ]
    },
    {
        "id": "11d08993db29bc4a",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 470,
        "y": 660,
        "wires": [
            [
                "6228e6354f6f8bdb"
            ]
        ]
    },
    {
        "id": "6157f188ba1a8854",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 4",
        "func": "flow.set('links-data', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 540,
        "wires": [
            [
                "62f2a6b125252f6e"
            ]
        ]
    },
    {
        "id": "6228e6354f6f8bdb",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 5",
        "func": "flow.set('convertif-data', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "62f2a6b125252f6e"
            ]
        ]
    },
    {
        "id": "62f2a6b125252f6e",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "convertlink",
        "func": "\n//var test = {}\n//test[\"links-data\"] = flow.get('links-data')\n//test[\"convertif-data\"] = flow.get('convertif-data')\n\n//msg.payload = test\nvar links = flow.get('links-data')\nvar convertdict = flow.get('convertif-data')\nvar convertlink = []\nfor (const item of links) {\n    var source = item[0]\n    var source_phrase = source.split(\":\")\n    var source_origin_node = source_phrase[0]\n    var source_origin_if = source_phrase[1]\n\n    for (const item2 of convertdict) {\n        if (item2.node.original == source_origin_node) {\n            var source_clab_node = item2.node.clab\n            for (const interface of item2.iflist) {\n                if (interface.original.includes(source_origin_if)) {\n                    var source_clab_if = interface.clab\n                }\n            }\n        }\n    }\n\n\n    var dest = item[1]\n    var dest_phrase = dest.split(\":\")\n    var dest_origin_node = dest_phrase[0]\n    var dest_origin_if = dest_phrase[1]\n\n    for (const item2 of convertdict) {\n        if (item2.node.original == dest_origin_node) {\n            var dest_clab_node = item2.node.clab\n            for (const interface of item2.iflist) {\n                if (interface.original.includes(dest_origin_if)) {\n                    var dest_clab_if = interface.clab\n                }\n            }\n        }\n    }\n    var source_clab = source_clab_node.concat(':', source_clab_if)\n    var dest_clab = dest_clab_node.concat(':', dest_clab_if)\n    convertlink.push({ \"endpoints\": [source_clab, dest_clab] })\n\n}\nmsg.payload = convertlink\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 740,
        "wires": [
            [
                "cf326f38384d9e4f",
                "27bffccc4143dcf8"
            ]
        ]
    },
    {
        "id": "4c6c56a54e3c6231",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "convertlink/batfish",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "1bc76754dc84457f"
            ]
        ]
    },
    {
        "id": "1bc76754dc84457f",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request convertif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/convertif/batfish/eth",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 230,
        "y": 740,
        "wires": [
            [
                "11d08993db29bc4a"
            ]
        ]
    },
    {
        "id": "86835c715d468c21",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "description/batfish",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "c2ba79ff7c2deb80",
                "10442146bec537d4"
            ]
        ]
    },
    {
        "id": "c2ba79ff7c2deb80",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request convertlink/batfish",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/convertlink/batfish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 350,
        "y": 800,
        "wires": [
            [
                "46cbcb2b1f47de64"
            ]
        ]
    },
    {
        "id": "10442146bec537d4",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request convertif/batfish",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/convertif/batfish/eth",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 330,
        "y": 900,
        "wires": [
            [
                "af95c45caf560776"
            ]
        ]
    },
    {
        "id": "46cbcb2b1f47de64",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 800,
        "wires": [
            [
                "9f71e05184fee10f"
            ]
        ]
    },
    {
        "id": "af95c45caf560776",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 550,
        "y": 920,
        "wires": [
            [
                "6ab21a0c2ee64da1"
            ]
        ]
    },
    {
        "id": "9f71e05184fee10f",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 6",
        "func": "flow.set('convertlink', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 800,
        "wires": [
            [
                "d97d9e9700cddabb"
            ]
        ]
    },
    {
        "id": "6ab21a0c2ee64da1",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 7",
        "func": "flow.set('convertif', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 920,
        "wires": [
            [
                "d97d9e9700cddabb"
            ]
        ]
    },
    {
        "id": "d97d9e9700cddabb",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "description",
        "func": "var tmpnodes = flow.get('convertif')\nvar convertlink = flow.get('convertlink')\nvar descrlist = []\nfor (var targetnode of tmpnodes ) {\n    for (var interface of targetnode[\"iflist\"]) {\n        for ( var tmplink of convertlink) {\n            for (var tmpif of targetnode.iflist){\n                var split_endpoint = tmplink.endpoints[0].split(\":\")\n                var split_endpoint2 = tmplink.endpoints[1].split(\":\")\n                if (split_endpoint[0] == targetnode.node.clab && split_endpoint[1].includes(interface.clab)) {\n                    var to = \"to\"\n                    interface[\"ifDescr\"] = to.concat('_', tmplink.endpoints[1].replace(\":\", \"_\"))\n                }                \n                else if (split_endpoint2[0] == targetnode.node.clab && split_endpoint2[1].includes(interface.clab)) {\n                    var to = \"to\"\n                    interface[\"ifDescr\"] = to.concat('_', tmplink.endpoints[0].replace(\":\", \"_\"))\n                }\n            }\n\n        }\n    }\n}\n\nmsg.payload = tmpnodes\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 880,
        "wires": [
            [
                "f0205f63334fa3f5",
                "d9accaa3855e9110"
            ]
        ]
    },
    {
        "id": "26999ae610120c3f",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "/ospf_iflist/:area",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "db948e0291dbe83c"
            ]
        ]
    },
    {
        "id": "db948e0291dbe83c",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 490,
        "y": 140,
        "wires": [
            [
                "6d2b7d4489774df7"
            ]
        ]
    },
    {
        "id": "18d3c3d8b7c4e022",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "/ospf/convertif/batfish",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1000,
        "wires": [
            [
                "4d1dac8f8467239e",
                "c36e5a7e4d2ea148"
            ]
        ]
    },
    {
        "id": "4d1dac8f8467239e",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request /ospf_iflist/area0",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/ospf_iflist/area0",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 430,
        "y": 1020,
        "wires": [
            [
                "b6ee4b6ec70e85b2"
            ]
        ]
    },
    {
        "id": "c36e5a7e4d2ea148",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request /convertif/batfish/eth",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/convertif/batfish/eth",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 400,
        "y": 1080,
        "wires": [
            [
                "767067f3c6668495"
            ]
        ]
    },
    {
        "id": "b6ee4b6ec70e85b2",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 1000,
        "wires": [
            [
                "80bb5bf4ae1f69ad"
            ]
        ]
    },
    {
        "id": "767067f3c6668495",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 1100,
        "wires": [
            [
                "f166d8cc1a13d1da"
            ]
        ]
    },
    {
        "id": "80bb5bf4ae1f69ad",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 8",
        "func": "flow.set('ospfif', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1000,
        "wires": [
            [
                "b171f0423d69c0c2"
            ]
        ]
    },
    {
        "id": "f166d8cc1a13d1da",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 9",
        "func": "flow.set('convertif', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1100,
        "wires": [
            [
                "b171f0423d69c0c2"
            ]
        ]
    },
    {
        "id": "b171f0423d69c0c2",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "ospf_attribute",
        "func": "var json1 = flow.get('ospfif')\nvar json2 = flow.get('convertif')\nfor (var e1 of json1) {\n    for (var e2 of json2) {\n        if (e1.node == e2.node.original) {\n            e1.iflist.forEach(function (itf1, idx1) { \n                e2.iflist.forEach(function (itf2) { \n                    if (itf1 === itf2.original) e1.iflist[idx1] = itf2.clab\n                }) \n            }) \n        }\n    }\n}\n\nmsg.payload = json1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1060,
        "wires": [
            [
                "f0205f63334fa3f5",
                "d9accaa3855e9110"
            ]
        ]
    },
    {
        "id": "d9accaa3855e9110",
        "type": "debug",
        "z": "1298b4fe103a59c1",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1040,
        "wires": []
    },
    {
        "id": "036d184bd40981df",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "/routetable/:routername",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1220,
        "wires": [
            [
                "86e59730818fe1d9",
                "3771560cd3a2beb7"
            ]
        ]
    },
    {
        "id": "86e59730818fe1d9",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request /convertif/batfish/eth",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/convertif/batfish/eth",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 440,
        "y": 1160,
        "wires": [
            [
                "0100ae1cd000598a"
            ]
        ]
    },
    {
        "id": "4e7b8ec50d9309d8",
        "type": "file in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 1260,
        "wires": [
            [
                "f6af1945701811f5"
            ]
        ]
    },
    {
        "id": "f6af1945701811f5",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 630,
        "y": 1300,
        "wires": [
            [
                "19c4e46efb304936"
            ]
        ]
    },
    {
        "id": "0100ae1cd000598a",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 650,
        "y": 1200,
        "wires": [
            [
                "e51141c0c92f3e6e"
            ]
        ]
    },
    {
        "id": "3771560cd3a2beb7",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "generate show route file path",
        "func": "var filedir = \"/data\"\nflow.set('routername', msg.req.params.routername);\nvar filename = msg.req.params.routername.concat('', \"_route.json\")\nmsg.payload = filedir.concat('/',filename)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1280,
        "wires": [
            [
                "4e7b8ec50d9309d8"
            ]
        ]
    },
    {
        "id": "e51141c0c92f3e6e",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 10",
        "func": "flow.set('convertif', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1200,
        "wires": [
            [
                "62f1af8d6f9cde46"
            ]
        ]
    },
    {
        "id": "19c4e46efb304936",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 11",
        "func": "flow.set('routetable', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1320,
        "wires": [
            [
                "62f1af8d6f9cde46"
            ]
        ]
    },
    {
        "id": "62f1af8d6f9cde46",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 12",
        "func": "var routetable = flow.get('routetable')\nvar convertif = flow.get('convertif')\nvar routername = flow.get('routername')\n\nfor (  var convert_list of convertif ){\n    if (convert_list[\"node\"][\"clab\"] == routername){\n        for (var iflist of convert_list[\"iflist\"]) {\n            var clabif = iflist[\"clab\"]\n            let re = new RegExp(clabif, 'g')\n            var originif = iflist[\"original\"]\n            if (iflist[\"clab\"] != \"lo\") {\n                var tmproutetable = routetable.toString().replace(re, originif)\n            }\n            routetable = tmproutetable\n        }\n    }\n}\nmsg.payload = routetable\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1260,
        "wires": [
            [
                "e9182d02b05b74e9"
            ]
        ]
    },
    {
        "id": "e9182d02b05b74e9",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1110,
        "y": 1160,
        "wires": [
            [
                "f0205f63334fa3f5",
                "d9accaa3855e9110"
            ]
        ]
    },
    {
        "id": "4f06b6184b982abb",
        "type": "http in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "url": "/ospfneigh/:routername",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1380,
        "wires": [
            [
                "c88dd14fe63d8a3e",
                "224084a2b4cba0c3"
            ]
        ]
    },
    {
        "id": "c88dd14fe63d8a3e",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "generate show route file path",
        "func": "var filedir = \"/data\"\nflow.set('routername', msg.req.params.routername);\nvar filename = msg.req.params.routername.concat('', \"_ospfneigh.json\")\nmsg.payload = filedir.concat('/',filename)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1460,
        "wires": [
            [
                "e82bbf51e262b6e0"
            ]
        ]
    },
    {
        "id": "e82bbf51e262b6e0",
        "type": "file in",
        "z": "1298b4fe103a59c1",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 540,
        "y": 1480,
        "wires": [
            [
                "4add4e7d9bda2d20"
            ]
        ]
    },
    {
        "id": "4add4e7d9bda2d20",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 730,
        "y": 1500,
        "wires": [
            [
                "10bde5e0193b8c8e"
            ]
        ]
    },
    {
        "id": "10bde5e0193b8c8e",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 13",
        "func": "flow.set('ospfneigh', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1480,
        "wires": [
            [
                "f46af66107572b56"
            ]
        ]
    },
    {
        "id": "224084a2b4cba0c3",
        "type": "http request",
        "z": "1298b4fe103a59c1",
        "name": "request /convertif/batfish/eth",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/convertif/batfish/eth",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 520,
        "y": 1380,
        "wires": [
            [
                "9e70e152adc5971b"
            ]
        ]
    },
    {
        "id": "9e70e152adc5971b",
        "type": "json",
        "z": "1298b4fe103a59c1",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "5c70bd3383eba8ad"
            ]
        ]
    },
    {
        "id": "5c70bd3383eba8ad",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 14",
        "func": "flow.set('convertif', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1420,
        "wires": [
            [
                "f46af66107572b56"
            ]
        ]
    },
    {
        "id": "f46af66107572b56",
        "type": "function",
        "z": "1298b4fe103a59c1",
        "name": "function 15",
        "func": "var ospfneigh = flow.get('ospfneigh')\nvar convertif = flow.get('convertif')\nvar routername = flow.get('routername')\n\nfor (  var convert_list of convertif ){\n    if (convert_list[\"node\"][\"clab\"] == routername){\n        for (var iflist of convert_list[\"iflist\"]) {\n            var clabif = iflist[\"clab\"]\n            let re = new RegExp(clabif, 'g')\n            var originif = iflist[\"original\"]\n            if (iflist[\"clab\"] != \"lo\") {\n                var tmproutetable = ospfneigh.toString().replace(re, originif)\n            }\n            ospfneigh = tmproutetable\n        }\n    }\n}\nmsg.payload = ospfneigh\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1420,
        "wires": [
            [
                "e9182d02b05b74e9"
            ]
        ]
    }
]